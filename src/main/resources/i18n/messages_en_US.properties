EMPTY_LABEL=

# Exception Code Labels
INVALID_END_POINT=Following {0} end point is not available. Please check endpoint name from allEndPoint call and try again.
INVALID_LEVEL=Following {0} level is not a valid level value. Please check supported level and endpoint from allEndPoint call and try again.
UNAVAILABLE_LEVEL=Following {0} level in {1} endpoint is not available. Please check supported level and endpoint from allEndPoint call and try again.
INVALID_ACCESS=Following {0} method is not accessible. Reasons might be improper visibility or improper method definition. please check logs.
INVALID_AGRUMENTS=Following {0} method is not passed right set of arguments. please check logs.
SYSTEM_ERROR=System Error Occurred. please check logs.

### XSS based Injections ###
XSS_VULNERABILITY=Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into \
otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code,\
 generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed\
  are quite widespread and occur anywhere a web application uses input from a user within the output \
  it generates without validating or encoding it. <br/> <br/> An attacker can use XSS to send a malicious script to an unsuspecting user.\
  The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script.\
   Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens,\
    or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content\
     of the HTML page. <br/><br/> For more information on XSS:\ <a href="https://owasp.org/www-community/attacks/xss/">Owasp XSS</a> \
     
     
#Image Tag Injections
XSS_IMAGE_TAG_INJECTION=$XSS_VULNERABILITY <br\> This vulnerability is related to Image Tag having XSS attacks. If ..
### How the Input is passed to the application
URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED=Image name is passed as a URL parameter to the application. It is not dependent on the query parameter name as all the sent query parameters are considered.
#### Attack Vector Description
XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url Parameters are added directly into the src attribute of Image Tag.
XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Quotes are added to Url Parameters and then directly added into the src attribute of Image Tag
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping is done on the Url Parameters and then directly added into the src attribute of Image Tag
XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG=HTML escaping along with removal of values containing paranthesis is done on the Url Parameters and then directly added into the src attribute of Image Tag
XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping is done on the Url Parameters and then inserted inside Quotes into the src attribute of Image Tag
XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Filtering Url Parameters and then HTML escaping and then inserted inside Quotes into the src attribute of Image Tag

#Html Tag Injection
XSS_HTML_TAG_INJECTION=Html Tag based XSS attack.
XSS_DIRECT_INPUT_DIV_TAG=Html Tag is directly injected into div tag.

### How the Input is passed to the application
URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED=Input passed as a URL parameter to the application will be shown in bold characters. It is not dependent on query parameter name as all the sent query parameters are considered.
### Attack vectors
XSS_DIRECT_INPUT_DIV_TAG=Url Parameters are added directly into div tag.
XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG=Url Parameters are added directly into the div tag if they are not having Script/Image and Anchor tag.

# XSS with Null Byte based Injections
XSS_NULL_BYTE_IMAGE_TAG_INJECTION=Url Parameters containing Null Bytes are added directly to the src attribute in Image Tag
XSS_NULL_BYTE_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url Parameters if contains Null Byte are added directly into the src attribute in Image Tag
XSS_PARSER_STOPS_AT_NULL_BYTE_ON_INPUT_AND_INSERTS_TILL_THAT_TO_SRC_ATTRIBUTE_IMG_TAG=Parser parses the Url Parameters and only add values until Null Bytes into the src attribute in Image Tag
XSS_QUOTES_NULL_BYTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=Url Parameters containing Null Bytes after adding Quotes are directly added into the src attribute of Img Tag
XSS_NULL_BYTE_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping is done on the Url Parameters if contains Null Bytes and then directly added into the src attribute of Img Tag
XSS_NULL_BYTE_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG=HTML escaping is done on Url Parameters if contains Null Bytes after adding Quotes are directly added into src attribute of Img Tag

### URL Redirection Injections ###

# Location Header Injection
URL_REDIRECTION_LOCATION_HEADER_INJECTION=LOCATION header based Url Redirection.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_LOCATION_HEADER=Url Parameter is directly added to LOCATION header value.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_LOCATION_HEADER_IF_CONTAINS_REQUEST_DOMAIN=Url Parameter is directly added to LOCATION header value if Parameter includes requested domain.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_LOCATION_HEADER_IF_DOMAIN_MATCHES=Url Parameter is directly added to LOCATION header value if domain name/authority is same as requested domain.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_LOCATION_HEADER_IF_DOMAIN_AND_PROTOCOL_MATCHES=Url Parameter is directly added to LOCATION header value if domain name/authority and Protocol is same as requested domain.
URL_REDIRECTION_INJECTION_BASED_ON_REFERER_HEADER=Url redirection based on Referer Header.
URL_REDIRECTION_NO_INJECTION_UNTRUSTED_DATA=Redirect is done to a Fixed URL and doesn't redirect to untrusted Data.

# Meta Tag based URL Redirection
URL_REDIRECTION_META_TAG_BASED_INJECTION=Meta Tag based Url Redirection.
URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG=Url Parameter is directly added to Meta Tag.


### Local File Injection ###
URL_BASED_LFI_INJECTION=Url based Local File Injection attack.
LFI_URL_PARAM_BASED_DIRECT_INJECTION=Url Parameter \"fileName\" is directly passed to the include file.
LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url Parameter \"fileName\" is validated and passed to include file.

### Local File Injection with Null Byte ###
URL_WITH_NULL_BYTE_BASED_LFI_INJECTION=Url with Null Byte Injection based Local File Injection attack.
LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Url Parameter \"fileName\" is directly passed to the include file if containing Null Byte.
LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE=Url Parameter \"fileName\" is validated and passed to include file.

### Remote File Injection ###
URL_BASED_RFI_INJECTION=Url based Local File Injection attack.
RFI_URL_PARAM_BASED_DIRECT_INJECTION=Url Parameter \"url\" is directly requested and response is appended to the general response.
RFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION=Url Parameter \"url\" is directly requested if contains null byte and response is appended to the general response.

### JWT Injection ###
JWT_INJECTION_VULNERABILITY=JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for \
securely transmitting information between parties as a JSON object. This information can be verified and trusted because \
it is digitally signed.There can be multiple things that can go wrong with the implementation of JWT and that can impact the Authentication or Authorization \
of the application and result in complete compromise of the system. Important Links on JWT : \
<ol> <li> <a href="https://en.wikipedia.org/wiki/JSON_Web_Token">Wiki Link</a>  \
 <li> <a href="https://jwt.io/introduction/">Jwt.io</a> \
 </ol> Important Links on Vulnerable implementations in JWT : \
 <ol> \ <li><a href="https://tools.ietf.org/html/draft-ietf-oauth-jwt-bcp-06" >JSON Web Token Best \
      Current Practices(ieft document)</a> \
   <li><a \
       href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html"> \
       OWASP cheatsheet for vulnerabilities in JWT implementation </a> \
   <li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries">For \
       server side vulnerabilities in JWT implementations</a> \
 </ol>
URL_CONTAINING_JWT_TOKEN=JWT Token is passed in the URL parameter named \"JWTToken\"
COOKIE_CONTAINING_JWT_TOKEN=JWT Token is passed in the Cookie key named \"JWTToken\"

#### AttackVector description
JWT_URL_EXPOSING_SECURE_INFORMATION=The request contains JWT token which is leaked in the URL. This can violate PCI and most organizational compliance policies.
COOKIE_CONTAINING_JWT_TOKEN_SECURITY_ATTRIBUTES_MISSING=Cookie based JWT token but without Secure/HttpOnly flags and also without cookie prefixes.
COOKIE_WITH_HTTPONLY_WITHOUT_SECURE_FLAG_BASED_JWT_VULNERABILITY=Cookie based JWT token but with HttpOnly flag but without Secure flag and also without cookie prefixes.
COOKIE_BASED_LOW_KEY_STRENGTH_JWT_VULNERABILITY=Cookie based JWT token signed using Weak key vulnerability.
COOKIE_BASED_NULL_BYTE_JWT_VULNERABILITY=Cookie based Null byte vulnerable JWT token validator.
COOKIE_BASED_NONE_ALGORITHM_JWT_VULNERABILITY=Cookie based None algorithm vulnerable JWT token validator.
COOKIE_BASED_KEY_CONFUSION_JWT_VULNERABILITY=Cookie based JWT token with Key confusion vulnerability.
COOKIE_BASED_FOR_JWK_HEADER_BASED_JWT_VULNERABILITY=Cookie based JWT token validator vulnerable to trusting JWK field without checking if public key provided is present in truststore or not. 
COOKIE_BASED_EMPTY_TOKEN_JWT_VULNERABILITY=Cookie based JWT token, vulnerable to empty token vulnerability attack.
