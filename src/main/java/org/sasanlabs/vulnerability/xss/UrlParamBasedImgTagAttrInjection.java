package org.sasanlabs.vulnerability.xss;

import java.util.Map;

import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.vulnerability.IGetInjectionPayload;
import org.sasanlabs.vulnerability.UrlParamBean;
import org.springframework.stereotype.Component;

/**
 * @author KSASAN preetkaran20@gmail.com
 *
 */
public class UrlParamBasedImgTagAttrInjection implements IGetInjectionPayload {

	private UrlParamBean UrlParamBean;

	@Override
	public void setUrlParamBean(UrlParamBean urlParamBean) {
		this.UrlParamBean = urlParamBean;
	}

	@Override
	public String getVulnerablePayload() {
		String vulnerablePayloadWithPlaceHolder = "<img src=%s/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
		}
		return payload.toString();
	}

	@Override
	public boolean inclusionInBodyTag() {
		return true;
	}

	@Override
	public String getSecurePayload() {
		String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\"/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(
					String.format(vulnerablePayloadWithPlaceHolder, StringEscapeUtils.escapeHtml4(map.getValue())));
		}
		return payload.toString();
	}

}
