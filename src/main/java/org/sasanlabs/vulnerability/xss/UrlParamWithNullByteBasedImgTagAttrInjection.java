package org.sasanlabs.vulnerability.xss;

import static org.sasanlabs.vulnerability.utils.Constants.NULL_BYTE_CHARACTER;

import java.util.Map;
import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.vulnerability.IGetInjectionPayload;
import org.sasanlabs.vulnerability.UrlParamBean;

/**
 * @author KSASAN preetkaran20@gmail.com
 *
 */
public class UrlParamWithNullByteBasedImgTagAttrInjection implements IGetInjectionPayload {

	private UrlParamBean UrlParamBean;

	@Override
	public void setUrlParamBean(UrlParamBean urlParamBean) {
		this.UrlParamBean = urlParamBean;
	}

	@Override
	public String getVulnerablePayload() {
		String vulnerablePayloadWithPlaceHolder = "<img src=%s/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> entry : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			if (entry.getValue().contains(NULL_BYTE_CHARACTER)) {
				payload.append(String.format(vulnerablePayloadWithPlaceHolder, entry.getValue()));
			}
		}
		return payload.toString();
	}

	
	@Override
	public String getSecurePayload() {
		String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\"/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> entry : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(String.format(vulnerablePayloadWithPlaceHolder, entry.getValue()));
		}
		return payload.toString();
	}

	@Override
	public boolean inclusionInBodyTag() {
		return true;
	}

}
