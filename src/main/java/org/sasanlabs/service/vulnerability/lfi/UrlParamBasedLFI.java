package org.sasanlabs.service.vulnerability.lfi;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

/**
 * Local File Injection vulnerable Endpoint. it is based on URL Parameter
 *
 * <p>TODO we need a UI template with fixed links as we have in DVWA but from URL it can be changed.
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "URL_BASED_LFI_INJECTION",
        value = "LocalFileInclusion",
        type = {VulnerabilityType.LFI})
public class UrlParamBasedLFI implements ICustomVulnerableEndPoint {

    private static final List<String> ALLOWED_FILE_NAMES = Arrays.asList("UserInfo.json");

    private static final transient Logger LOGGER = LogManager.getLogger(UrlParamBasedLFI.class);

    private static final String URL_PARAM_KEY = "fileName";

    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "LFI_URL_PARAM_BASED_DIRECT_INJECTION")
    public ResponseBean<String> getVulnerablePayloadLevelUnsecure(ParameterBean parameterBean) {
        StringBuilder payload = new StringBuilder();
        String fileName = parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);
        if (fileName != null) {
            try {
                File userInfoFile =
                        new File(
                                this.getClass().getResource("/").toURI().getPath()
                                        + "scripts/LFI/"
                                        + fileName);
                FileInputStream userInfoEntityStream;
                userInfoEntityStream = new FileInputStream(userInfoFile);
                if (userInfoEntityStream != null) {
                    try (BufferedReader reader =
                            new BufferedReader(new InputStreamReader(userInfoEntityStream))) {
                        String userInfo = reader.readLine();
                        while (userInfo != null) {
                            payload.append(userInfo);
                            userInfo = reader.readLine();
                        }
                    } catch (IOException e) {
                        LOGGER.error("Following error occurred: ", e);
                    }
                }
            } catch (FileNotFoundException ex) {
                LOGGER.error("Following error occurred: ", ex);
            } catch (URISyntaxException ex) {
                LOGGER.error("Following error occurred: ", ex);
            }
        }

        return new ResponseBean<>(
                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
    }

    @VulnerabilityLevel(
            value = LevelEnum.SECURE,
            descriptionLabel = "LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE")
    public ResponseBean<String> getVulnerablePayloadLevel2(ParameterBean parameterBean) {
        StringBuilder payload = new StringBuilder();
        String fileName = parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);

        if (fileName != null && ALLOWED_FILE_NAMES.contains(fileName)) {
            try {
                File userInfoFile =
                        new File(
                                this.getClass().getResource("/").toURI().getPath()
                                        + "scripts/LFI/"
                                        + fileName);
                FileInputStream userInfoEntityStream;
                userInfoEntityStream = new FileInputStream(userInfoFile);
                if (userInfoEntityStream != null) {
                    try (BufferedReader reader =
                            new BufferedReader(new InputStreamReader(userInfoEntityStream))) {
                        String userInfo = reader.readLine();
                        while (userInfo != null) {
                            payload.append(userInfo);
                            userInfo = reader.readLine();
                        }
                    } catch (IOException e) {
                        LOGGER.error("Following error occurred: ", e);
                    }
                }
            } catch (FileNotFoundException ex) {
                LOGGER.error("Following error occurred: ", ex);
            } catch (URISyntaxException ex) {
                LOGGER.error("Following error occurred: ", ex);
            }
        }
        return new ResponseBean<>(
                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
    }
}
