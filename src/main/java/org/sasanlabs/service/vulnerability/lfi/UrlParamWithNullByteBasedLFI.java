package org.sasanlabs.service.vulnerability.lfi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

import static org.sasanlabs.vulnerability.utils.Constants.NULL_BYTE_CHARACTER;

/**
 * Local File Injection vulnerable Endpoint. it is based on URL Parameter and
 * also works if Null Byte is there.
 * 
 * TODO we need a UI template with fixed links as we have in DVWA but from URL
 * it can be changed.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */

@VulnerableServiceRestEndPoint(descriptionLabel = "URL_WITH_NULL_BYTE_BASED_LFI_INJECTION", value = "UrlParamWithNullByteBasedLFI", type = {
		VulnerabilityType.LFI, VulnerabilityType.NULL_BYTE })
public class UrlParamWithNullByteBasedLFI implements ICustomVulnerableEndPoint {

	private ParameterBean parameterBean;

	private static final List<String> ALLOWED_FILE_NAMES = Arrays.asList("UserInfo.json");

	private static final transient Logger LOGGER = LogManager.getLogger(UrlParamBasedLFI.class);

	private static final String URL_PARAM_KEY = "fileName";

	@Override
	public void setParameterBean(ParameterBean paramBean) {
		this.parameterBean = paramBean;
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "LFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION")
	public ResponseBean getVulnerablePayloadLevelUnsecure() {
		StringBuilder payload = new StringBuilder();
		String fileName = this.parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);
		if (fileName != null && fileName.contains(NULL_BYTE_CHARACTER)) {
			InputStream userInfoEntityStream = this.getClass().getResourceAsStream("/scripts/LFI/" + fileName);
			if (userInfoEntityStream != null) {
				try (BufferedReader reader = new BufferedReader(new InputStreamReader(userInfoEntityStream))) {
					String userInfo = reader.readLine();
					while (userInfo != null) {
						payload.append(userInfo);
						userInfo = reader.readLine();
					}
				} catch (IOException e) {
					LOGGER.error("Following error occurred :", e);
				}
			}
		}

		return new ResponseBean(GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_2, descriptionLabel = "LFI_URL_PARAM_AND_NULL_BYTE_BASED_VALIDATION_BYPASS_INJECTION")
	public ResponseBean getVulnerablePayloadLevel2() {
		StringBuilder payload = new StringBuilder();
		String fileName = this.parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);
		if (fileName != null && fileName.contains(NULL_BYTE_CHARACTER)) {
			InputStream userInfoEntityStream = this.getClass().getResourceAsStream("/scripts/LFI/" + fileName);
			if (userInfoEntityStream != null) {
				try (BufferedReader reader = new BufferedReader(new InputStreamReader(userInfoEntityStream))) {
					String userInfo = reader.readLine();
					while (userInfo != null) {
						payload.append(userInfo);
						userInfo = reader.readLine();
					}
				} catch (IOException e) {
					LOGGER.error("Following error occurred :", e);
				}
			}
		}

		return new ResponseBean(GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
	}

	@VulnerabilityLevel(value = LevelEnum.SECURE, descriptionLabel = "LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE")
	public ResponseBean getVulnerablePayloadLevelSecure() {
		StringBuilder payload = new StringBuilder();
		String fileName = this.parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);

		if (fileName != null && ALLOWED_FILE_NAMES.contains(fileName)) {
			InputStream userInfoEntityStream = this.getClass().getResourceAsStream("/scripts/LFI/" + fileName);
			if (userInfoEntityStream != null) {
				try (BufferedReader reader = new BufferedReader(new InputStreamReader(userInfoEntityStream))) {
					String userInfo = reader.readLine();
					while (userInfo != null) {
						payload.append(userInfo);
						userInfo = reader.readLine();
					}
				} catch (IOException e) {
					LOGGER.error("Following error occurred : ", e);
				}
			}
		}
		return new ResponseBean(GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
	}

}
