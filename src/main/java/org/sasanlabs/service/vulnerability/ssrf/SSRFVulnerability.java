package org.sasanlabs.service.vulnerability.ssrf;


import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.sasanlabs.service.vulnerability.xxe.bean.Book;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

@VulnerableAppRestController(
        descriptionLabel = "SSRF_VULNERABILITY",
        value = "SSRF",
        type = {VulnerabilityType.SSRF})
public class SSRFVulnerability {

    private static final String IMAGE_URL = "imageurl";

    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.SSRF,
            description = "IMAGE_URL_PASSED_TO_REQUEST")

    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_1,
            descriptionLabel = "REQUEST_IMAGE_URL",
            htmlTemplate = "LEVEL_1/SSRF",
            parameterName = IMAGE_URL,
            responseType = ResponseType.JSON)

    public ResponseEntity<GenericVulnerabilityResponseBean<byte[]>> getVulnerablePayloadLevel1(
            @RequestParam(IMAGE_URL) String urlImage) {
        try {
            URL u = new URL(urlImage);
            URLConnection urlConnection = u.openConnection();
            byte[] bytes = StreamUtils.copyToByteArray(urlConnection.getInputStream());
            return new ResponseEntity<>(
                    new GenericVulnerabilityResponseBean<>(
                            bytes,
                            true),
                    HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();

        }
        return new ResponseEntity<>(
                new GenericVulnerabilityResponseBean<>(
                        null,
                        true),
                HttpStatus.BAD_REQUEST);
    }
}
