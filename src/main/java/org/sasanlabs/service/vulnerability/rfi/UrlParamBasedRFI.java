package org.sasanlabs.service.vulnerability.rfi;

import static org.sasanlabs.vulnerability.utils.Constants.NULL_BYTE_CHARACTER;

import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.service.vulnerability.lfi.UrlParamBasedLFI;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.web.client.RestTemplate;

/**
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableServiceRestEndPoint(descriptionLabel = "URL_BASED_RFI_INJECTION", value = "UrlParamBasedRFI", type = {
		VulnerabilityType.RFI })
public class UrlParamBasedRFI implements ICustomVulnerableEndPoint {
	private ParameterBean parameterBean;

	
	private static final transient Logger LOGGER = LogManager.getLogger(UrlParamBasedLFI.class);

	private static final String URL_PARAM_KEY = "url";

	@Override
	public void setParameterBean(ParameterBean paramBean) {
		this.parameterBean = paramBean;
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "RFI_URL_PARAM_BASED_DIRECT_INJECTION")
	public ResponseBean getVulnerablePayloadLevelUnsecure() {
		StringBuilder payload = new StringBuilder();
		String queryParameterURL = this.parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);
		if (queryParameterURL != null) {
			try {
				URL url = new URL(queryParameterURL);
				RestTemplate restTemplate = new RestTemplate();
				payload.append(restTemplate.getForObject(url.toURI(), String.class));
			} catch (IOException | URISyntaxException e) {
				LOGGER.error("Following error occurred:", e);
			}
		}

		return new ResponseBean(GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
	}
	
	@VulnerabilityLevel(value = LevelEnum.LEVEL_2, descriptionLabel = "RFI_URL_PARAM_AND_NULL_BYTE_BASED_DIRECT_INJECTION")
	public ResponseBean getVulnerablePayloadLevelUnsecureLevel2() {
		StringBuilder payload = new StringBuilder();
		String queryParameterURL = this.parameterBean.getQueryParamKeyValueMap().get(URL_PARAM_KEY);
		if (queryParameterURL != null && queryParameterURL.contains(NULL_BYTE_CHARACTER)) {
			try {
				URL url = new URL(queryParameterURL);
				RestTemplate restTemplate = new RestTemplate();
				payload.append(restTemplate.getForObject(url.toURI(), String.class));
			} catch (IOException | URISyntaxException e) {
				LOGGER.error("Following error occurred:", e);
			}
		}

		return new ResponseBean(GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()));
	}

}
