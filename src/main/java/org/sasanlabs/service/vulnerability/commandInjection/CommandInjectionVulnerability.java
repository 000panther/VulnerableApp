package org.sasanlabs.service.vulnerability.commandInjection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;


/**
 * This class contains vulnerabilities related to Command Injection.
 * <a href="https://owasp.org/www-community/attacks/Command_Injection">For More information</a>
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "COMMAND_INJECTION_VULNERABILITY",
        value = "CommandInjectionVulnerability",
        type = {VulnerabilityType.COMMAND_INJECTION})
public class CommandInjectionVulnerability implements ICustomVulnerableEndPoint{

	private static final String IP_ADDRESS = "ipaddr";
	private static final transient Logger LOGGER = LogManager.getLogger(CommandInjectionVulnerability.class);

	@AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.COMMAND_INJECTION,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            //htmlTemplate = "LEVEL_1/JWT_Level1",
            parameterName = IP_ADDRESS,
            sampleValues = {""})
    public ResponseBean<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevelUnsecure(
            ParameterBean parameterBean)
            throws ServiceApplicationException, IOException {
		boolean isWindows = System.getProperty("os.name")
				  .toLowerCase().startsWith("windows");
		Process process;
		if(!isWindows) {
			process =  new ProcessBuilder(new String[] { "bash", "-c", "ping -c 2 " + parameterBean.getQueryParamKeyValueMap().get(IP_ADDRESS)}).redirectErrorStream(true).start();
		} else {
			process = new ProcessBuilder(new String[] { "cmd", "/c", "ping -n 2 " + parameterBean.getQueryParamKeyValueMap().get(IP_ADDRESS)}).redirectErrorStream(true).start();			
		}
		StringBuilder response = new StringBuilder();
		try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
			bufferedReader.lines().forEach(val -> response.append(val).append("\n"));
		}
		return new ResponseBean<GenericVulnerabilityResponseBean<String>>(new GenericVulnerabilityResponseBean<String>(response.toString(), true));
    }
}
