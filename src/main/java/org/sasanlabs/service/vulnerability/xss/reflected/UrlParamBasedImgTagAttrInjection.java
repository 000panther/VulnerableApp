package org.sasanlabs.service.vulnerability.xss.reflected;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

/**
 * This class contains XSS vulnerabilities which are present in Image Tag attribute.
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "XSS_VULNERABILITY",
        value = "XSSInImgTagAttribute",
        type = VulnerabilityType.XSS)
public class UrlParamBasedImgTagAttrInjection implements ICustomVulnerableEndPoint {

    private static final String OWASP_IMAGE = "images/owasp.png";
    private static final String ZAP_IMAGE = "images/ZAP.png";
    private static final String PARAMETER_NAME = "src";

    private Set<String> allowedValues = new HashSet<>();

    public UrlParamBasedImgTagAttrInjection() {
        allowedValues.add(OWASP_IMAGE);
        allowedValues.add(ZAP_IMAGE);
    }

    // Just adding User defined input(Untrusted Data) into Src tag is not secure.
    // Can be broken by various ways
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevel1(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Adding Untrusted Data into Src tag between quotes is beneficial but not
    // without escaping the input
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_2,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevel2(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Good way for HTML escapes so hacker cannot close the tags but can use event
    // handlers like onerror etc. eg:- ''onerror='alert(1);'
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_3,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevelMedium(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            payload.append(
                    String.format(
                            vulnerablePayloadWithPlaceHolder,
                            StringEscapeUtils.escapeHtml4(map.getValue())));
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Good way for HTML escapes so hacker cannot close the tags and also cannot pass brackets but
    // can use event
    // handlers like onerror etc. eg:- onerror=alert`1` (backtick operator)
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description =
                    "XSS_HTML_ESCAPE_ON_DIRECT_INPUT_AND_REMOVAL_OF_VALUES_WITH_PARENTHESIS_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_4,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevelMedium2(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            if (!map.getValue().contains("(") || !map.getValue().contains(")")) {
                payload.append(
                        String.format(
                                vulnerablePayloadWithPlaceHolder,
                                StringEscapeUtils.escapeHtml4(map.getValue())));
            }
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Good way and can protect against attacks but it is better to have check on
    // the input values provided if possible.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_5,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevelHigh(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            payload.append(
                    String.format(
                            vulnerablePayloadWithPlaceHolder,
                            StringEscapeUtils.escapeHtml4(map.getValue())));
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Good way and can protect against attacks but it is better to have check on
    // the input values provided if possible.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description =
                    "XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.SECURE,
            descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = OWASP_IMAGE)
    public ResponseBean<String> getVulnerablePayloadLevelSecure(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            if (allowedValues.contains(map.getValue())) {
                payload.append(
                        String.format(
                                vulnerablePayloadWithPlaceHolder,
                                StringEscapeUtils.escapeHtml4(map.getValue())));
            }
        }
        return new ResponseBean<String>(payload.toString());
    }
}
