package org.sasanlabs.service.vulnerability.xss.reflected;

import static org.sasanlabs.vulnerability.utils.Constants.NULL_BYTE_CHARACTER;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.sasanlabs.vulnerability.utils.Constants;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * This class exposes the restful services which are vulnerable to XSS and Null Byte Injection
 * vulnerabilities. Both these vulnerabilities are present in Image Tag's src attribute i.e. {@code
 * <img src=value />}
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableAppRestController(
        descriptionLabel = "XSS_NULL_BYTE_IMAGE_TAG_INJECTION",
        value = "XSSWithNullBytesImgTagAttribute",
        type = {VulnerabilityType.XSS, VulnerabilityType.NULL_BYTE})
public class UrlParamWithNullByteBasedImgTagAttrInjection {

    private Set<String> allowedValues = new HashSet<>();

    public UrlParamWithNullByteBasedImgTagAttrInjection() {
        allowedValues.add("images/owasp.png");
        allowedValues.add("images/ZAP.png");
    }

    // Just adding User defined input(Untrusted Data) incase it contains Null Byte
    // into Src tag is not secure.
    // Can be broken by various ways
    @VulnerableAppRequestMapping(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "XSS_NULL_BYTE_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelUnsecure(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s 	width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            if (map.getValue().equals(Constants.getEyeCatcher())
                    || map.getValue().contains(NULL_BYTE_CHARACTER)
                    || allowedValues.contains(map.getValue())) {
                payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }

    // Just adding User defined input(Untrusted Data) untill Null Byte incase it
    // contains Null Byte
    // into Src tag is not secure.
    // Can be broken by various ways
    @VulnerableAppRequestMapping(
            value = LevelEnum.LEVEL_2,
            descriptionLabel =
                    "XSS_PARSER_STOPS_AT_NULL_BYTE_ON_INPUT_AND_INSERTS_TILL_THAT_TO_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelLow(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            String parameterValue = map.getValue();
            if (parameterValue.equals(Constants.getEyeCatcher())
                    || parameterValue.contains(NULL_BYTE_CHARACTER)) {
                String parsedParameterValue;
                if (parameterValue.equals(Constants.getEyeCatcher())) {
                    parsedParameterValue = parameterValue;
                } else {
                    parsedParameterValue =
                            parameterValue.substring(parameterValue.indexOf(NULL_BYTE_CHARACTER));
                }
                payload.append(
                        String.format(vulnerablePayloadWithPlaceHolder, parsedParameterValue));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }

    // Adding Untrusted Data into Src tag between quotes is beneficial but not
    // without escaping the input
    @VulnerableAppRequestMapping(
            value = LevelEnum.LEVEL_3,
            descriptionLabel = "XSS_QUOTES_NULL_BYTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelMedium(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            if (map.getValue().equals(Constants.getEyeCatcher())
                    || map.getValue().contains(NULL_BYTE_CHARACTER)) {
                payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }

    // Good way for HTML escapes so hacker cannot close the tags but can use event
    // handlers like onerror etc. eg:- '%00'onerror='alert(1);'
    @VulnerableAppRequestMapping(
            value = LevelEnum.LEVEL_4,
            descriptionLabel = "XSS_NULL_BYTE_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelHigh(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=%s width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            if (map.getValue().equals(Constants.getEyeCatcher())
                    || map.getValue().contains(NULL_BYTE_CHARACTER)) {
                payload.append(
                        String.format(
                                vulnerablePayloadWithPlaceHolder,
                                StringEscapeUtils.escapeHtml4(map.getValue())));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }

    // Good way and can protect against attacks but it is better to have check on
    // the input values provided if possible.
    @VulnerableAppRequestMapping(
            value = LevelEnum.LEVEL_5,
            descriptionLabel =
                    "XSS_NULL_BYTE_QUOTES_AND_WITH_HTML_ESCAPE_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelVeryHigh(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            if (map.getValue().equals(Constants.getEyeCatcher())
                    || map.getValue().contains(NULL_BYTE_CHARACTER)) {
                payload.append(
                        String.format(
                                vulnerablePayloadWithPlaceHolder,
                                StringEscapeUtils.escapeHtml4(map.getValue())));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }

    // Good way and can protect against attacks but it is better to have check on
    // the input values provided if possible.
    @VulnerableAppRequestMapping(
            value = LevelEnum.SECURE,
            descriptionLabel =
                    "XSS_QUOTES_AND_WITH_HTML_ESCAPE_PLUS_FILTERING_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG",
            htmlTemplate = "LEVEL_1/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseEntity<String> getVulnerablePayloadLevelSecure(
            @RequestParam Map<String, String> queryParams) {
        String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\" 	width=\"400\" height=\"300\"/>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : queryParams.entrySet()) {
            if (map.getValue().equals(Constants.getEyeCatcher())
                    || allowedValues.contains(map.getValue())) {
                payload.append(
                        String.format(
                                vulnerablePayloadWithPlaceHolder,
                                StringEscapeUtils.escapeHtml4(map.getValue())));
            }
        }
        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);
    }
}
