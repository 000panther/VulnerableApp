package org.sasanlabs.service.vulnerability.xss.impl;

import java.util.Map;

import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.VulnerabilityLevel;
import org.sasanlabs.internal.utility.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.vulnerability.xss.IGetInjectionPayload;
import org.sasanlabs.service.vulnerability.xss.UrlParamBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

/**
 * @author KSASAN preetkaran20@gmail.com
 *
 */

@VulnerableServiceRestEndPoint(descriptionLabel = "XSS_IMAGE_TAG_INJECTION", name = "UrlParamBasedImgTagAttrInjection", type = VulnerabilityType.XSS)
public class UrlParamBasedImgTagAttrInjection implements IGetInjectionPayload {

	private UrlParamBean UrlParamBean;

	@Override
	public void setUrlParamBean(UrlParamBean urlParamBean) {
		this.UrlParamBean = urlParamBean;
	}

	//Just adding User defined input(Untrusted Data) into Src tag is not secure. Can be broken by various ways
	@VulnerabilityLevel(value = LevelEnum.UNSECURE, descriptionLabel = "XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG")
	public String getVulnerablePayloadLevelUnsecure() {
		String vulnerablePayloadWithPlaceHolder = "<img src=%s/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
		}
		return payload.toString();
	}
	
	//Adding Untrusted Data into Src tag between quotes is beneficial but not this way.
	@VulnerabilityLevel(value = LevelEnum.LOW, descriptionLabel = "XSS_QUOTES_ON_INPUT_SRC_ATTRIBUTE_IMG_TAG")
	public String getVulnerablePayloadLevelLow() {
		String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\"/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
		}
		return payload.toString();
	}

	//Good way for HTML escapes so hacker cannot close the tags but can use event handlers like onerror etc. eg:- ''onerror='alert(1);'
	@VulnerabilityLevel(value = LevelEnum.MEDIUM, descriptionLabel = "XSS_HTML_ESCAPE_ON_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG")
	public String getVulnerablePayloadLevelMedium() {
		String vulnerablePayloadWithPlaceHolder = "<img src=%s/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(String.format(vulnerablePayloadWithPlaceHolder, StringEscapeUtils.escapeHtml4(map.getValue())));
		}
		return payload.toString();
	}

	
	@Override
	public boolean inclusionInBodyTag() {
		return true;
	}

	
	@VulnerabilityLevel(LevelEnum.SECURE)
	public String getSecurePayload() {
		String vulnerablePayloadWithPlaceHolder = "<img src=\"%s\"/>";
		StringBuilder payload = new StringBuilder();
		for (Map.Entry<String, String> map : this.UrlParamBean.getParamKeyValueMap().entrySet()) {
			payload.append(
					String.format(vulnerablePayloadWithPlaceHolder, StringEscapeUtils.escapeHtml4(map.getValue())));
		}
		return payload.toString();
	}

}
