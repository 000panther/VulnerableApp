package org.sasanlabs.service.vulnerability.xss.persistent;

import java.util.ArrayList;
import java.util.List;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;

@VulnerableServiceRestEndPoint(descriptionLabel = "XSS_HTML_TAG_INJECTION", value = "PersistentXSSVulnerability", type = VulnerabilityType.XSS)
public class PersistentXSSVulnerability implements ICustomVulnerableEndPoint {

	private static final String SAMPLE_VALUE = "Welcome to Owasp VulnerableApp";
	private static final String PARAMETER_NAME = "comment";

	@Autowired
	private PostRepository postRepository;

	// Just adding User defined input(Untrusted Data) into Src tag is not secure.
	// Can be broken by various ways
	@AttackVector(vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS, description = "XSS_DIRECT_INPUT_SRC_ATTRIBUTE_IMG_TAG")
	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "URL_PARAMETER_CONTAINING_IMAGE_NAME_ALL_PARAMETER_CONSIDERED", htmlTemplate = "LEVEL_1/PersistentXSS", responseType = ResponseType.JSON, parameterName = PARAMETER_NAME, sampleValues = SAMPLE_VALUE, httpMethod = HttpMethod.GET)
	public ResponseBean<List<Post>> getVulnerablePayloadLevel1(ParameterBean parameterBean) {
		if (parameterBean.getQueryParamKeyValueMap().containsKey(PARAMETER_NAME)) {
			Post post = new Post();
			post.setContent(parameterBean.getQueryParamKeyValueMap().get(PARAMETER_NAME));
			this.postRepository.save(post);
		}
		List<Post> posts = new ArrayList<>();
		this.postRepository.findAll().forEach(posts::add);
		return new ResponseBean<List<Post>>(posts);
	}
}
