package org.sasanlabs.service.vulnerability.xss;

import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

/**
 * This is a XSS vulnerability present in Html Tag injection.
 *
 * @author KSASAN preetkaran20@gmail.com
 */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "XSS_HTML_TAG_INJECTION",
        value = "XSSWithHTMLTagInjection",
        type = VulnerabilityType.XSS)
public class UrlParamBasedHtmlTagInjection extends UrlParamBasedOutOfHtmlTagInjection {

    // Just adding User defined input(Untrusted Data) into div tag.
    // Can be broken by various ways
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description = "XSS_DIRECT_INPUT_DIV_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseBean<String> getVulnerablePayloadLevel1(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<div>%s<div>";
        StringBuilder payload = new StringBuilder();
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Just adding User defined input(Untrusted Data) into div tag if doesn't contains
    // anchor/script/image tag.
    // Can be broken by various ways
    // eg: <object data="something" onerror=alert(1) />
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description =
                    "XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_AND_IMG_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_2,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseBean<String> getVulnerablePayloadLevel2(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<div>%s<div>";
        StringBuilder payload = new StringBuilder();
        Pattern pattern = Pattern.compile("[<]+[(script)(img)(a)]+.*[>]+");
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            Matcher matcher = pattern.matcher(map.getValue());
            if (!matcher.find()) {
                payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
            }
        }
        return new ResponseBean<String>(payload.toString());
    }

    // Just adding User defined input(Untrusted Data) into div tag if doesn't contains
    // anchor/script/image tag and also alert/javascript keyword.
    // Can be broken by various ways
    // eg: <object data=data:text/html;base64,PHNjcmlwdD5hbGVydCgiSGVsbG8iKTs8L3NjcmlwdD4= />
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.REFLECTED_XSS,
            description =
                    "XSS_DIRECT_INPUT_DIV_TAG_AFTER_REMOVING_VALUES_CONTAINING_ANCHOR_SCRIPT_IMG_TAG_AND_ALERT_KEYWORD")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_3,
            descriptionLabel = "URL_PARAMETER_CONTAINING_HTML_TAG_ALL_PARAMETER_CONSIDERED",
            htmlTemplate = "LEVEL/XSS",
            responseType = ResponseType.HTML_TAGS_ONLY)
    public ResponseBean<String> getVulnerablePayloadLevel3(ParameterBean parameterBean) {
        String vulnerablePayloadWithPlaceHolder = "<div>%s<div>";
        StringBuilder payload = new StringBuilder();
        Pattern pattern = Pattern.compile("[<]+[(script)(img)(a)]+.*[>]+");
        for (Map.Entry<String, String> map : parameterBean.getQueryParamKeyValueMap().entrySet()) {
            Matcher matcher = pattern.matcher(map.getValue());
            if (!matcher.find()
                    && !map.getValue().contains("alert")
                    && !map.getValue().contains("javascript")) {
                payload.append(String.format(vulnerablePayloadWithPlaceHolder, map.getValue()));
            }
        }
        return new ResponseBean<String>(payload.toString());
    }
}
