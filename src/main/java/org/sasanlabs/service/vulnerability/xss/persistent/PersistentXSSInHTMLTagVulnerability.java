package org.sasanlabs.service.vulnerability.xss.persistent;

import java.util.function.Function;
import org.apache.commons.text.StringEscapeUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.ResponseType;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;

/** @author preetkaran20 KSASAN */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "XSS_VULNERABILITY",
        value = "PersistentXSSInHTMLTagVulnerability",
        type = VulnerabilityType.XSS)
public class PersistentXSSInHTMLTagVulnerability implements ICustomVulnerableEndPoint {

    private static final String SAMPLE_VALUE = "Amazing%20man";
    private static final String PARAMETER_NAME = "comment";

    @Autowired private PostRepository postRepository;

    /**
     * Common utility for returning the Payload provided the Level and the computation applied on
     * post's content.
     *
     * @param parameterBean
     * @param level as we are storing posts per level so that they don't interfere between levels.
     * @param function to be applied on the data from DB before returning.
     * @return
     */
    private String getCommentsPayload(
            ParameterBean parameterBean, LevelEnum level, Function<String, String> function) {
        if (parameterBean.getQueryParamKeyValueMap().containsKey(PARAMETER_NAME)) {
            Post post = new Post();
            post.setLevelIdentifier(level);
            post.setContent(parameterBean.getQueryParamKeyValueMap().get(PARAMETER_NAME));
            this.postRepository.save(post);
        }
        StringBuilder posts = new StringBuilder();
        this.postRepository
                .findAll()
                .forEach(
                        (post) -> {
                            if (post.getLevelIdentifier().equals(level)) {
                                posts.append(
                                        "<div id=\"comments\">"
                                                + function.apply(post.getContent())
                                                + "</div>");
                            }
                        });
        return posts.toString();
    }

    // Just adding User defined input(Untrusted Data) into div tag is not secure.
    // Can be broken by various ways
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS,
            description = "PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "PERSISTENT_XSS_HTML_TAG_URL_CONTAINING_COMMENT",
            htmlTemplate = "LEVEL_1/PersistentXSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = SAMPLE_VALUE,
            httpMethod = HttpMethod.GET)
    public ResponseBean<String> getVulnerablePayloadLevel1(ParameterBean parameterBean) {
        return new ResponseBean<String>(
                this.getCommentsPayload(parameterBean, LevelEnum.LEVEL_1, post -> post));
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS,
            description =
                    "PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_2,
            descriptionLabel = "PERSISTENT_XSS_HTML_TAG_URL_CONTAINING_COMMENT",
            htmlTemplate = "LEVEL_1/PersistentXSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = SAMPLE_VALUE,
            httpMethod = HttpMethod.GET)
    public ResponseBean<String> getVulnerablePayloadLevel2(ParameterBean parameterBean) {
        return new ResponseBean<String>(
                this.getCommentsPayload(
                        parameterBean,
                        LevelEnum.LEVEL_2,
                        post -> post.replaceAll("(<img)(<input)", "")));
    }

    // <image src=" " onerror="alert(1)" >
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS,
            description =
                    "PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_REPLACING_IMG_AND_INPUT_TAG_CASE_INSENSITIVE")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_3,
            descriptionLabel = "PERSISTENT_XSS_HTML_TAG_URL_CONTAINING_COMMENT",
            htmlTemplate = "LEVEL_1/PersistentXSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = SAMPLE_VALUE,
            httpMethod = HttpMethod.GET)
    public ResponseBean<String> getVulnerablePayloadLevel3(ParameterBean parameterBean) {
        return new ResponseBean<String>(
                this.getCommentsPayload(
                        parameterBean,
                        LevelEnum.LEVEL_3,
                        post -> post.replaceAll("((?i)<img)*((?i)<script)*", "")));
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS,
            description =
                    "PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_IF_NOT_CONTAINING_ANGLE_BRACKETS")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_4,
            descriptionLabel = "PERSISTENT_XSS_HTML_TAG_URL_CONTAINING_COMMENT",
            htmlTemplate = "LEVEL_1/PersistentXSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = SAMPLE_VALUE,
            httpMethod = HttpMethod.GET)
    public ResponseBean<String> getVulnerablePayloadLevel4(ParameterBean parameterBean) {
        return new ResponseBean<String>(
                this.getCommentsPayload(
                        parameterBean, LevelEnum.LEVEL_4, post -> post.replaceAll("[<>]*", "")));
    }

    // as we are adding to div tag so we can leverage the Html Escape for taking care of XSS.
    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.PERSISTENT_XSS,
            description =
                    "PERSISTENT_XSS_HTML_TAG_URL_PARAM_DIRECTLY_INJECTED_IN_DIV_TAG_AFTER_HTML_ESCAPING")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_5,
            descriptionLabel = "PERSISTENT_XSS_HTML_TAG_URL_CONTAINING_COMMENT",
            htmlTemplate = "LEVEL_1/PersistentXSS",
            responseType = ResponseType.HTML_TAGS_ONLY,
            parameterName = PARAMETER_NAME,
            sampleValues = SAMPLE_VALUE,
            httpMethod = HttpMethod.GET)
    public ResponseBean<String> getVulnerablePayloadLevel5(ParameterBean parameterBean) {
        return new ResponseBean<String>(
                this.getCommentsPayload(
                        parameterBean,
                        LevelEnum.LEVEL_5,
                        post -> StringEscapeUtils.escapeHtml4(post)));
    }
}
