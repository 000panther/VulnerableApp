package org.sasanlabs.service.vulnerability.jwt;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

/** @author KSASAN preetkaran20@gmail.com */
public class JWTUtils {

	public static final char JWT_TOKEN_PERIOD_CHARACTER = '.';

	public static final String JWT_TOKEN_PERIOD_CHARACTER_REGEX = "[" + JWT_TOKEN_PERIOD_CHARACTER + "]";

	public static final String BASE64_PADDING_CHARACTER_REGEX = "=";

	public static final String HS256_ALGO_JAVA = "HmacSHA256";

	public static final String NONE_ALGORITHM = "none";
	public static final String JWT_ALGORITHM_KEY_HEADER = "alg";
	public static final String JSON_WEB_KEY_HEADER = "jwk";
	public static final String JWT_RSA_ALGORITHM_IDENTIFIER = "RS";
	public static final String JWT_RSA_PSS_ALGORITHM_IDENTIFIER = "PS";
	public static final String JWT_HMAC_ALGORITHM_IDENTIFIER = "HS";
	public static final String JWT_EC_ALGORITHM_IDENTIFIER = "EC";
	public static final String JWT_OCTET_ALGORITHM_IDENTIFIER = "ED";
	// TODO need to make it better.
	public static final String HMAC_TOKEN_TO_BE_SIGNED = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
			+ "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ";

	public static byte[] getBytes(String token) throws UnsupportedEncodingException {
		return token.getBytes(StandardCharsets.UTF_8);
	}

	public static String getString(byte[] tokenBytes) throws UnsupportedEncodingException {
		return new String(tokenBytes, StandardCharsets.UTF_8);
	}

	/**
	 * we are using base64 Url Safe. because of JWT specifications <br>
	 * <b> base64 and base64url encoding are different in the last two characters
	 * used, ie, base64 -> '+/', or base64url -> '-_' see
	 * https://en.wikipedia.org/wiki/Base64#URL_applications </b> As per
	 * <a href="https://www.rfc-editor.org/rfc/rfc7515.txt">RFC 7515, Appendix C.
	 * Notes on Implementing base64url Encoding without Padding</a> padding is not
	 * there in JWT.
	 *
	 * @param token
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static String getBase64UrlSafeWithoutPaddingEncodedString(String token) throws UnsupportedEncodingException {
		return JWTUtils.getString(Base64.getUrlEncoder().encode(getBytes(token)))
				.replaceAll(BASE64_PADDING_CHARACTER_REGEX, "");
	}

	/**
	 * we are using base64 Url Safe. because of JWT specifications <br>
	 * <b> base64 and base64url encoding are different in the last two characters
	 * used, ie, base64 -> '+/', or base64url -> '-_' see
	 * https://en.wikipedia.org/wiki/Base64#URL_applications </b> As per
	 * <a href="https://www.rfc-editor.org/rfc/rfc7515.txt">RFC 7515, Appendix C.
	 * Notes on Implementing base64url Encoding without Padding</a> padding is not
	 * there in JWT.
	 *
	 * @param token
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public static String getBase64UrlSafeWithoutPaddingEncodedString(byte[] token) throws UnsupportedEncodingException {
		return JWTUtils.getString(Base64.getUrlEncoder().encode(token)).replaceAll(BASE64_PADDING_CHARACTER_REGEX, "");
	}

	public static String getBase64EncodedHMACSignedToken(byte[] token, byte[] secretKey)
			throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException {
		Mac hmacSHA256 = Mac.getInstance(HS256_ALGO_JAVA);
		SecretKeySpec hmacSecretKey = new SecretKeySpec(secretKey, HS256_ALGO_JAVA);
		hmacSHA256.init(hmacSecretKey);
		byte[] tokenSignature = hmacSHA256.doFinal(token);
		String base64EncodedSignature = JWTUtils.getBase64UrlSafeWithoutPaddingEncodedString(tokenSignature);
		return base64EncodedSignature;
	}
}
