package org.sasanlabs.service.vulnerability.jwt.keys;

import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.JSONSerializationUtils;

import com.fasterxml.jackson.core.type.TypeReference;

/**
 * Singleton class parses SymmetricAlgoKeys.json from scripts/JWT and holds for
 * entire Lifecycle of Application
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
public class SymmetricAlgorithmKMS {

	private static final Object MUTEX = new Object();

	private volatile static boolean initDone = false;

	private Set<SymmetricAlgorithmKey> symmetricAlgorithmKeySet;

	private static final transient Logger LOGGER = LogManager.getLogger(SymmetricAlgorithmKMS.class);

	public SymmetricAlgorithmKMS() {
		if (!initDone) {
			synchronized (MUTEX) {
				if (!initDone) {
					initialize();
					initDone = true;
				}
			}
		}
	}

	/**
	 * Returns first matched Key for Algorithm and KeyStrength.
	 * 
	 * @param algorithm
	 * @param keyStrength
	 * @return
	 */
	public Optional<SymmetricAlgorithmKey> getKey(String algorithm, KeyStrength keyStrength) {
		return symmetricAlgorithmKeySet.stream()
				.filter((symmetricAlgorithmKey) -> symmetricAlgorithmKey.getAlgorithm().equals(algorithm)
						&& symmetricAlgorithmKey.getStrength().equals(keyStrength))
				.findFirst();
	}

	private void initialize() {
		try (InputStream jwtSymmetricKeyStream = this.getClass()
				.getResourceAsStream("/scripts/JWT/SymmetricAlgoKeys.json")) {
			symmetricAlgorithmKeySet = JSONSerializationUtils.deserialize(jwtSymmetricKeyStream,
					new TypeReference<Set<SymmetricAlgorithmKey>>() {
					});
		} catch (IOException e) {
			LOGGER.error("Following error occurred while parsing SymmetricAlgoKeys", e);
		}
	}

}
