package org.sasanlabs.service.vulnerability.jwt.bean;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

/** @author KSASAN preetkaran20@gmail.com */
public class JWTUtils {

    public static final char JWT_TOKEN_PERIOD_CHARACTER = '.';

    public static final String JWT_TOKEN_PERIOD_CHARACTER_REGEX =
            "[" + JWT_TOKEN_PERIOD_CHARACTER + "]";

    public static final String BASE64_PADDING_CHARACTER_REGEX = "=";

    public static final String NONE_ALGORITHM = "none";
    public static final String JWT_ALGORITHM_KEY_HEADER = "alg";
    public static final String JSON_WEB_KEY_HEADER = "jwk";
    public static final String JWT_RSA_ALGORITHM_IDENTIFIER = "RS";
    public static final String JWT_RSA_PSS_ALGORITHM_IDENTIFIER = "PS";
    public static final String JWT_HMAC_ALGORITHM_IDENTIFIER = "HS";
    public static final String JWT_EC_ALGORITHM_IDENTIFIER = "EC";
    public static final String JWT_OCTET_ALGORITHM_IDENTIFIER = "ED";
    public static final String JWT_HMAC_SHA_256_ALGORITHM = "HS256";
    // TODO need to make it better.
    public static final String HS256_TOKEN_TO_BE_SIGNED =
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
                    + "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ";

    public static final String RS256_TOKEN_TO_BE_SIGNED =
            "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9."
                    + "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0";

    public static final String GENERIC_BASE64_ENCODED_PAYLOAD =
            "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG"
                    + "4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0";

    public static byte[] getBytes(String token) throws UnsupportedEncodingException {
        return token.getBytes(StandardCharsets.UTF_8);
    }

    public static String getString(byte[] tokenBytes) throws UnsupportedEncodingException {
        return new String(tokenBytes, StandardCharsets.UTF_8);
    }

    public static final Map<String, String> JWT_HMAC_ALGO_TO_JAVA_ALGORITHM_MAPPING =
            createJWTHmacAlgoToJavaAlgoMapping();

    static Map<String, String> createJWTHmacAlgoToJavaAlgoMapping() {
        Map<String, String> jwtAlgoToJavaAlgoMapping = new HashMap<String, String>();
        jwtAlgoToJavaAlgoMapping.put(JWT_HMAC_SHA_256_ALGORITHM, "HmacSHA256");
        jwtAlgoToJavaAlgoMapping.put("HS384", "HmacSHA384");
        jwtAlgoToJavaAlgoMapping.put("HS512", "HmacSHA512");
        return jwtAlgoToJavaAlgoMapping;
    }

    /**
     * we are using <a href="https://en.wikipedia.org/wiki/Base64#URL_applications">base64 Url Safe
     * encoding</a>. because of JWT specifications <br>
     * Also we are removing the padding as per <a
     * href="https://www.rfc-editor.org/rfc/rfc7515.txt">RFC 7515</a> padding is not there in JWT.
     *
     * @param token
     * @return
     * @throws UnsupportedEncodingException
     */
    public static String getBase64UrlSafeWithoutPaddingEncodedString(String token)
            throws UnsupportedEncodingException {
        return JWTUtils.getBase64UrlSafeWithoutPaddingEncodedString(getBytes(token));
    }

    /**
     * we are using <a href="https://en.wikipedia.org/wiki/Base64#URL_applications">base64 Url Safe
     * encoding</a>. because of JWT specifications <br>
     * Also we are removing the padding as per <a
     * href="https://www.rfc-editor.org/rfc/rfc7515.txt">RFC 7515</a> padding is not there in JWT.
     *
     * @param token
     * @return
     * @throws UnsupportedEncodingException
     */
    public static String getBase64UrlSafeWithoutPaddingEncodedString(byte[] token)
            throws UnsupportedEncodingException {
        return JWTUtils.getString(Base64.getUrlEncoder().encode(token))
                .replaceAll(BASE64_PADDING_CHARACTER_REGEX, "");
    }
}
