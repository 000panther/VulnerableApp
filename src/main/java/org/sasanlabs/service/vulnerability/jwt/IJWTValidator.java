package org.sasanlabs.service.vulnerability.jwt;

import java.io.UnsupportedEncodingException;
import java.security.Key;

import org.json.JSONException;

/**
 * JWTValidator is used for validating jwt token. it will contain various
 * implementations of validating libraries.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
public interface IJWTValidator {

	boolean customHS256Validator(String token, byte[] key);

	boolean customHS256NullByteVulnerableValidator(String token, byte[] key);

	boolean customHS256NoneAlgorithmVulnerableValidator(String token, byte[] key);

	/**
	 * This validator is vulnerable to the Confusion Algorithm attack.
	 * 
     * Background about the attack:<br>
     * Say an application is using RSA to sign JWT now what will be the verification method {@code
     * verify(String jwtToken, byte[] key); }
     *
     * <p>Now if application is using RSA then for verification RSA public key will be used and in
     * case jwttoken is based on HMAC algorithm then verify method will think key as Secret key for
     * HMAC and will try to decrypt it and as public key is known to everyone so anyone can sign the
     * key with public key and HMAC will accept it.
     *
	 * @param token
	 * @param key
	 * @return
	 * @throws JSONException
	 * @throws UnsupportedEncodingException
	 */
	boolean confusionAlgorithmVulnerableValidator(String token, Key key)
			throws JSONException, UnsupportedEncodingException;

	/**
	 * Considers Public Key present in JWK Header as trusted which is supplied by
	 * the user and should not be trusted.
	 * 
	 * @param token
	 * @return
	 * @throws UnsupportedEncodingException 
	 * @throws JSONException 
	 */
	boolean jwkKeyHeaderPublicKeyTrustingVulnerableValidator(String token) throws JSONException, UnsupportedEncodingException;
}
