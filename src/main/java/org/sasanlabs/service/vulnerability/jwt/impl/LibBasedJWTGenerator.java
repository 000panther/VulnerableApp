package org.sasanlabs.service.vulnerability.jwt.impl;

import java.util.Date;

import javax.crypto.SecretKey;

import org.sasanlabs.service.vulnerability.jwt.ILibBasedJWTGenerator;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

/**
 * Creates JWT token based on multiple libraries.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
@Component
public class LibBasedJWTGenerator implements ILibBasedJWTGenerator {

	public static final SecretKey SIGNING_KEY_HS256 = Keys.secretKeyFor(SignatureAlgorithm.HS256);
	/**
	 * Generates JWT token using JJWT {@link https://github.com/jwtk/jjwt} Algorithm
	 * used is HMAC_SHA-256
	 * 
	 * @param plainToken
	 * @param key
	 * @return SignedToken
	 */
	@Override
	public String getJWTTokenJJWTLib_HS256(String plainToken, byte[] key) {
		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
		long nowMillis = System.currentTimeMillis();
		Date now = new Date(nowMillis);
		JwtBuilder jws = Jwts.builder().setId("1").setIssuedAt(now).setSubject("adsd").setIssuer("SASAN Labs")
				.signWith(SIGNING_KEY_HS256, signatureAlgorithm);

		long expMillis = nowMillis + 100000;
		Date exp = new Date(expMillis);
		jws.setExpiration(exp);

		return jws.compact();
	}

}
