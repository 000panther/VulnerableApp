package org.sasanlabs.service.vulnerability.jwt.impl;

import static org.sasanlabs.service.vulnerability.jwt.JWTUtils.HS256_ALGO_JAVA;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.sasanlabs.service.exception.ExceptionStatusCodeEnum;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.jwt.IJWTTokenGenerator;
import org.sasanlabs.service.vulnerability.jwt.JWTUtils;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;;

/**
 * Creates JWT token based on multiple libraries.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
@Component
public class LibBasedJWTGenerator implements IJWTTokenGenerator {

	public static String getBase64EncodedHMACSignedToken(byte[] token, byte[] secretKey)
			throws ServiceApplicationException, UnsupportedEncodingException {
		try {
			Mac hmacSHA256 = Mac.getInstance(HS256_ALGO_JAVA);
			SecretKeySpec hmacSecretKey = new SecretKeySpec(secretKey, HS256_ALGO_JAVA);
			hmacSHA256.init(hmacSecretKey);
			byte[] tokenSignature = hmacSHA256.doFinal(token);
			String base64EncodedSignature = JWTUtils.getBase64UrlSafeWithoutPaddingEncodedString(tokenSignature);
			return base64EncodedSignature;
		} catch (InvalidKeyException | NoSuchAlgorithmException | IOException e) {
			throw new ServiceApplicationException(ExceptionStatusCodeEnum.SYSTEM_ERROR,
					"Exception occurred while Signing token: " + JWTUtils.getString(token), e);
		}
	}

	@Override
	public String getJWTToken_HS256(String tokenToBeSigned, byte[] key)
			throws UnsupportedEncodingException, ServiceApplicationException {
		return tokenToBeSigned + JWTUtils.JWT_TOKEN_PERIOD_CHARACTER + getBase64EncodedHMACSignedToken(tokenToBeSigned.getBytes("UTF-8"), key);
	}

	@Override
	public String getJWTToken_RS256(String tokenToBeSigned, KeyPair key) {
		String jws = Jwts.builder().setSubject(tokenToBeSigned).signWith(key.getPrivate()).compact();  
		return jws;
	}

}
