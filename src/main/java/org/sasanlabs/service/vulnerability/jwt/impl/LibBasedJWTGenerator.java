package org.sasanlabs.service.vulnerability.jwt.impl;

import static org.sasanlabs.service.vulnerability.jwt.JWTUtils.HS256_ALGO_JAVA;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Date;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.sasanlabs.service.exception.ExceptionStatusCodeEnum;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.jwt.ILibBasedJWTGenerator;
import org.sasanlabs.service.vulnerability.jwt.JWTUtils;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;;

/**
 * Creates JWT token based on multiple libraries.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
@Component
public class LibBasedJWTGenerator implements ILibBasedJWTGenerator {

	public static final SecretKey SIGNING_KEY_HS256 = Keys.secretKeyFor(SignatureAlgorithm.HS256);

	/**
	 * Generates JWT token using JJWT {@link https://github.com/jwtk/jjwt} Algorithm
	 * used is HMAC_SHA-256
	 * 
	 * @param plainToken
	 * @param key
	 * @return SignedToken
	 */
	@Override
	public String getJWTTokenJJWTLib_HS256(String plainToken, byte[] key) {
		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
		long nowMillis = System.currentTimeMillis();
		Date now = new Date(nowMillis);
		JwtBuilder jws = Jwts.builder().setId("1").setIssuedAt(now).setSubject("adsd").setIssuer("SASAN Labs")
				.signWith(signatureAlgorithm, key);

		long expMillis = nowMillis + 100000000;
		Date exp = new Date(expMillis);
		jws.setExpiration(exp);

		return jws.compact();
	}

	public static String getBase64EncodedHMACSignedToken(byte[] token, byte[] secretKey)
			throws ServiceApplicationException, UnsupportedEncodingException {
		try {
			Mac hmacSHA256 = Mac.getInstance(HS256_ALGO_JAVA);
			SecretKeySpec hmacSecretKey = new SecretKeySpec(secretKey, HS256_ALGO_JAVA);
			hmacSHA256.init(hmacSecretKey);
			byte[] tokenSignature = hmacSHA256.doFinal(token);
			String base64EncodedSignature = JWTUtils.getBase64UrlSafeWithoutPaddingEncodedString(tokenSignature);
			return base64EncodedSignature;
		} catch (InvalidKeyException | NoSuchAlgorithmException | IOException e) {
			throw new ServiceApplicationException(ExceptionStatusCodeEnum.SYSTEM_ERROR,
					"Exception occurred while Signing token: " + JWTUtils.getString(token), e);
		}
	}

	@Override
	public String getJWTToken_Custom_HS256(String tokenToBeSigned, byte[] key)
			throws UnsupportedEncodingException, ServiceApplicationException {
		return tokenToBeSigned + JWTUtils.JWT_TOKEN_PERIOD_CHARACTER + getBase64EncodedHMACSignedToken(tokenToBeSigned.getBytes("UTF-8"), key);
	}

}
