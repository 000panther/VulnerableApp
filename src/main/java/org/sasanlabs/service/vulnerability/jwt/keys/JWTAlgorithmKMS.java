package org.sasanlabs.service.vulnerability.jwt.keys;

import java.io.IOException;
import java.io.InputStream;
import java.security.KeyPair;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.JSONSerializationUtils;

import com.fasterxml.jackson.core.type.TypeReference;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

/**
 * Singleton class parses SymmetricAlgoKeys.json from scripts/JWT and holds for
 * entire Lifecycle of Application Also this class is responsible to generate
 * the Asymmetric Algorithm keys.
 * 
 * @author KSASAN preetkaran20@gmail.com
 */
public class JWTAlgorithmKMS {

	private static final Object MUTEX = new Object();

	private volatile static boolean initDone = false;

	private static Set<SymmetricAlgorithmKey> symmetricAlgorithmKeySet;

	public static Map<String, KeyPair> asymmetricAlgorithmKeyMap = new HashMap<String, KeyPair>();

	public static final List<String> asymmetricAlgorithms = Arrays.asList("RS256", "PS256");

	private static final String SYMMETRIC_KEYS_FILE = "/scripts/JWT/SymmetricAlgoKeys.json";

	private static final transient Logger LOGGER = LogManager.getLogger(JWTAlgorithmKMS.class);

	public JWTAlgorithmKMS() {
		if (!initDone) {
			synchronized (MUTEX) {
				if (!initDone) {
					initialize();
					initDone = true;
				}
			}
		}
	}

	/**
	 * Returns first matched Key for Algorithm and KeyStrength.
	 * 
	 * @param algorithm
	 * @param keyStrength
	 * @return
	 */
	public Optional<SymmetricAlgorithmKey> getSymmetricAlgorithmKey(String algorithm, KeyStrength keyStrength) {
		return symmetricAlgorithmKeySet.stream()
				.filter((symmetricAlgorithmKey) -> symmetricAlgorithmKey.getAlgorithm().equals(algorithm)
						&& symmetricAlgorithmKey.getStrength().equals(keyStrength))
				.findFirst();
	}

	/**
	 * Returns Asymmetric Algorithm Keys
	 * 
	 * @param algorithm
	 * @return
	 */
	public Optional<KeyPair> getAsymmetricAlgorithmKey(String algorithm) {
		return Optional.ofNullable(asymmetricAlgorithmKeyMap.get(algorithm));
	}

	private void initialize() {
		try (InputStream jwtSymmetricKeyStream = this.getClass().getResourceAsStream(SYMMETRIC_KEYS_FILE)) {
			symmetricAlgorithmKeySet = JSONSerializationUtils.deserialize(jwtSymmetricKeyStream,
					new TypeReference<Set<SymmetricAlgorithmKey>>() {
					});
		} catch (IOException e) {
			LOGGER.error("Following error occurred while parsing SymmetricAlgoKeys", e);
		}

		for (String asymmetricAlgo : asymmetricAlgorithms) {
			asymmetricAlgorithmKeyMap.put(asymmetricAlgo, Keys.keyPairFor(SignatureAlgorithm.valueOf(asymmetricAlgo)));
		}

	}

}
