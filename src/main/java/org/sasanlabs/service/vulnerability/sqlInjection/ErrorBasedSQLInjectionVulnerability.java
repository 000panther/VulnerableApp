package org.sasanlabs.service.vulnerability.sqlInjection;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 * This is the easiest SQL Injection.
 * @author preetkaran20@gmail.com KSASAN
 */
@VulnerableServiceRestEndPoint(descriptionLabel = "JWT_INJECTION_VULNERABILITY", type = { VulnerabilityType.SQL_INJECTION }, value = "ErrorBasedSQLInjectionVulnerability")
public class ErrorBasedSQLInjectionVulnerability implements ICustomVulnerableEndPoint{

	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@AttackVector(
            vulnerabilityExposed = VulnerabilityType.JWT,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
	public ResponseBean<CarInformation> getCarInformationLevel1(ParameterBean parameterBean) {
		String id = parameterBean.getQueryParamKeyValueMap().get("id");
		CarInformation carInformation = new CarInformation();
		jdbcTemplate.query("select * from cars where id=" + id, (rs) -> {
			carInformation.setId(rs.getInt(1));
			carInformation.setName(rs.getString(2));
			carInformation.setModel(rs.getString(3));
			carInformation.setImagePath(rs.getString(4));
		});
		return new ResponseBean<CarInformation>(carInformation);
	}
	
}
