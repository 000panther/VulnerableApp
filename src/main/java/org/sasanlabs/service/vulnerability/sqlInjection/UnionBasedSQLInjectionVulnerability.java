package org.sasanlabs.service.vulnerability.sqlInjection;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 * Union Based SQL Injection is another dangerous way to extract data from the database by combining
 * results of multiple queries. This is the second way which is generally tried by the hackers after
 * {@link ErrorBasedSQLInjectionVulnerability}
 *
 * @author preetkaran20@gmail.com KSASAN
 */
@VulnerableServiceRestEndPoint(
        descriptionLabel = "SQL_INJECTION_VULNERABILITY",
        type = {VulnerabilityType.SQL_INJECTION},
        value = "UnionBasedSQLInjectionVulnerability")
public class UnionBasedSQLInjectionVulnerability implements ICustomVulnerableEndPoint {

    @Qualifier("applicationJdbcTemplate")
    @Autowired
    private JdbcTemplate applicationJdbcTemplate;

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.SQL_INJECTION,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_1,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseBean<CarInformation> getCarInformationLevel1(ParameterBean parameterBean) {
        String id = parameterBean.getQueryParamKeyValueMap().get("id");
        CarInformation carInformation = new CarInformation();
        applicationJdbcTemplate.query(
                "select * from cars where id=" + id,
                (rs) -> {
                    carInformation.setId(rs.getInt(1));
                    carInformation.setName(rs.getString(2));
                    carInformation.setImagePath(rs.getString(3));
                });
        return new ResponseBean<CarInformation>(carInformation);
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.SQL_INJECTION,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_2,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseBean<CarInformation> getCarInformationLevel2(ParameterBean parameterBean) {
        String id = parameterBean.getQueryParamKeyValueMap().get("id");
        CarInformation carInformation = new CarInformation();
        applicationJdbcTemplate.query(
                "select * from cars where id='" + id + "'",
                (rs) -> {
                    carInformation.setId(rs.getInt(1));
                    carInformation.setName(rs.getString(2));
                    carInformation.setImagePath(rs.getString(3));
                });
        return new ResponseBean<CarInformation>(carInformation);
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.SQL_INJECTION,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_3,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseBean<CarInformation> getCarInformationLevel3(ParameterBean parameterBean) {
        String id = parameterBean.getQueryParamKeyValueMap().get("id").replaceAll("'", "");
        CarInformation carInformation = new CarInformation();
        applicationJdbcTemplate.query(
                "select * from cars where id='" + id + "'",
                (rs) -> {
                    carInformation.setId(rs.getInt(1));
                    carInformation.setName(rs.getString(2));
                    carInformation.setImagePath(rs.getString(3));
                });
        return new ResponseBean<CarInformation>(carInformation);
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.SQL_INJECTION,
            description = "JWT_URL_EXPOSING_SECURE_INFORMATION")
    @VulnerabilityLevel(
            value = LevelEnum.LEVEL_4,
            descriptionLabel = "URL_CONTAINING_JWT_TOKEN",
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseBean<CarInformation> getCarInformationLevel4(ParameterBean parameterBean) {
        String id = parameterBean.getQueryParamKeyValueMap().get("id");
        CarInformation carInformation = new CarInformation();
        applicationJdbcTemplate.query(
                "select * from cars where id=?",
                (prepareStatement) -> {
                    prepareStatement.setString(1, id);
                },
                (rs) -> {
                    while (rs.next()) {
                        carInformation.setId(rs.getInt(1));
                        carInformation.setName(rs.getString(2));
                        carInformation.setImagePath(rs.getString(3));
                    }
                    return null;
                });
        return new ResponseBean<CarInformation>(carInformation);
    }
}
