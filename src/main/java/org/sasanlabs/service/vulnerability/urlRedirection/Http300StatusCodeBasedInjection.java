package org.sasanlabs.service.vulnerability.urlRedirection;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.VulnerabilityLevel;
import org.sasanlabs.internal.utility.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.IGetInjectionPayload;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

/**
 * @author KSASAN preetkaran20@gmail.com
 *
 */
@VulnerableServiceRestEndPoint(descriptionLabel = "URL_REDIRECTION_LOCATION_HEADER_INJECTION", value = "Http300StatusCodeBasedInjection", type = {
		VulnerabilityType.URL_REDIRECT })
public class Http300StatusCodeBasedInjection implements IGetInjectionPayload {

	private ParameterBean parameterBean;
	
	private static final String LOCATION_HEADER_KEY = "LOCATION";

	@Override
	public void setParameterBean(ParameterBean parameterBean) {
		this.parameterBean = parameterBean;
	}

	@VulnerabilityLevel(value = LevelEnum.UNSECURE, descriptionLabel = "URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_LOCATION_HEADER")
	public ResponseBean getVulnerablePayloadLevelUnsecure() {
		Map<String, List<String>> headerParam = new LinkedHashMap<>();
		Iterator<Entry<String, String>> iterator = parameterBean.getQueryParamKeyValueMap().entrySet().iterator();
		if (iterator.hasNext()) {
			Entry<String, String> entry = iterator.next();
			headerParam.put(LOCATION_HEADER_KEY, new ArrayList<>());
			headerParam.get(LOCATION_HEADER_KEY).add(entry.getValue());
		}
		return new ResponseBean(302, headerParam);
	}

}
