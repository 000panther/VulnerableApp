package org.sasanlabs.service.vulnerability.urlRedirection;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;

@VulnerableAppRestController(
        descriptionLabel = "URL_REDIRECTION_META_TAG_BASED_INJECTION",
        value = "MetaTagBasedInjection",
        type = {VulnerabilityType.OPEN_REDIRECT})
public class MetaTagBasedInjection {

    private static final String META_TAG_PAYLOAD =
            "<meta http-equiv=\"refresh\" content=\"2;url=%s/\" />";

    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_1,
            descriptionLabel = "URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG")
    public ResponseEntity<String> getVulnerablePayloadLevelUnsecure(
            @RequestParam Map<String, String> queryParams) {
        Iterator<Entry<String, String>> iterator = queryParams.entrySet().iterator();
        String metaTag = "";
        if (iterator.hasNext()) {
            Entry<String, String> entry = iterator.next();
            metaTag = String.format(META_TAG_PAYLOAD, entry.getValue());
        }
        return new ResponseEntity<>(
                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(metaTag), HttpStatus.OK);
    }
}
