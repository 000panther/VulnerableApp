package org.sasanlabs.service.vulnerability.urlRedirection;

import java.util.Iterator;
import java.util.Map.Entry;

import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;

@VulnerableServiceRestEndPoint(descriptionLabel = "URL_REDIRECTION_META_TAG_BASED_INJECTION", value = "MetaTagBasedInjection", type = {
		VulnerabilityType.URL_REDIRECT })
public class MetaTagBasedInjection implements ICustomVulnerableEndPoint {

	private ParameterBean parameterBean;

	private static final String META_TAG_PAYLOAD = "<meta http-equiv=\"refresh\" content=\"2;url=%s/\" />";

	@Override
	public void setParameterBean(ParameterBean parameterBean) {
		this.parameterBean = parameterBean;
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "URL_REDIRECTION_URL_PARAMETER_INJECTION_INTO_META_TAG")
	public ResponseBean getVulnerablePayloadLevelUnsecure() {
		Iterator<Entry<String, String>> iterator = parameterBean.getQueryParamKeyValueMap().entrySet().iterator();
		String metaTag = "";
		if (iterator.hasNext()) {
			Entry<String, String> entry = iterator.next();
			metaTag = String.format(META_TAG_PAYLOAD, entry.getValue());
		}
		return new ResponseBean(200, GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(metaTag));
	}
}
