/**
 * 
 */
package org.sasanlabs.service.vulnerability.nosqlInjection.mongo.repository;

import java.util.ArrayList;
import java.util.List;

import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;

import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.MongoDatabase;

/**
 * @author KSASAN preetkaran20@gmail.com
 *
 */
@Repository
public class VulnerableRepository {

	private MongoClient mongoClient;

	private MongoDatabase db;

	@Autowired
	public VulnerableRepository(MongoClient mongoClient, @Value("${spring.data.mongodb.database}") String dbName) {
		this.mongoClient = mongoClient;
		CodecRegistry pojoCodecRegistry = org.bson.codecs.configuration.CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), org.bson.codecs.configuration.CodecRegistries.fromProviders(PojoCodecProvider.builder().automatic(true).build()));
		this.db = this.mongoClient.getDatabase(dbName).withCodecRegistry(pojoCodecRegistry);
	}

	/**
	 * @param <T>
	 * @param filter to fetch by Id
	 * @param documentType
	 * @param collectionName
	 * @return
	 */
	public <T> List<T> findByFilter(String filter, Class<T> documentType, String collectionName) {
		List<T> documents = new ArrayList<>();
		BasicDBObject query = BasicDBObject.parse(filter);
		return db.getCollection(collectionName).find(query, documentType).into(documents);
	}

}
