package org.sasanlabs.service.vulnerability.nosqlInjection.mongo;

import java.util.Iterator;
import java.util.Map.Entry;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.service.vulnerability.nosqlInjection.mongo.bean.UserBean;
import org.sasanlabs.service.vulnerability.nosqlInjection.mongo.service.MongoDBVulnerableServiceImpl;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;

@VulnerableServiceRestEndPoint(descriptionLabel = "NOSQL_MONGO_DB_INJECTION", type = {
		VulnerabilityType.NOSQL_MONGO_INJECTION }, value = "MongoDBInjectionController")
public class MongoDBInjectionController implements ICustomVulnerableEndPoint {

	private ParameterBean parameterBean;
	private MongoDBVulnerableServiceImpl mongoDBVulnerableServiceImpl;

	@Autowired
	public MongoDBInjectionController(MongoDBVulnerableServiceImpl mongoDBVulnerableServiceImpl) {
		this.mongoDBVulnerableServiceImpl = mongoDBVulnerableServiceImpl;
	}

	@Override
	public void setParameterBean(ParameterBean parameterBean) {
		this.parameterBean = parameterBean;
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "")
	public ResponseBean simpleWhereClauseInjectionLow() {

		Iterator<Entry<String, String>> itr = this.parameterBean.getQueryParamKeyValueMap().entrySet().iterator();
		StringBuilder result = new StringBuilder();
		if (itr.hasNext()) {
			UserBean userBean = this.mongoDBVulnerableServiceImpl.getByIdResult(itr.next().getValue());
			result.append(userBean.toString());
		}
		ResponseBean responseBean = new ResponseBean(200, result.toString());
		return responseBean;
	}
}
