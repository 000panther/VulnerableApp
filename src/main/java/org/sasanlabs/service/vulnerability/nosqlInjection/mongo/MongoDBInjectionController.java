package org.sasanlabs.service.vulnerability.nosqlInjection.mongo;

import java.text.MessageFormat;
import java.util.Iterator;
import java.util.Map.Entry;

import org.sasanlabs.internal.utility.LevelEnum;
import org.sasanlabs.internal.utility.annotations.VulnerabilityLevel;
import org.sasanlabs.internal.utility.annotations.VulnerableServiceRestEndPoint;
import org.sasanlabs.service.bean.ResponseBean;
import org.sasanlabs.service.vulnerability.ICustomVulnerableEndPoint;
import org.sasanlabs.service.vulnerability.ParameterBean;
import org.sasanlabs.service.vulnerability.nosqlInjection.mongo.bean.UserBean;
import org.sasanlabs.service.vulnerability.nosqlInjection.mongo.service.MongoDBService;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Autowired;

@VulnerableServiceRestEndPoint(descriptionLabel = "NOSQL_MONGO_DB_INJECTION", type = {
		VulnerabilityType.NOSQL_MONGO_INJECTION }, value = "MongoDBInjectionController")
public class MongoDBInjectionController implements ICustomVulnerableEndPoint {

	private ParameterBean parameterBean;
	private MongoDBService mongoDBVulnerableServiceImpl;
	private MongoDBService mongoDBServiceImpl;

	@Autowired
	public MongoDBInjectionController(MongoDBService mongoDBVulnerableServiceImpl, MongoDBService mongoDBServiceImpl) {
		this.mongoDBVulnerableServiceImpl = mongoDBVulnerableServiceImpl;
		this.mongoDBServiceImpl = mongoDBServiceImpl;
	}

	@Override
	public void setParameterBean(ParameterBean parameterBean) {
		this.parameterBean = parameterBean;
	}

	@VulnerabilityLevel(value = LevelEnum.LEVEL_1, descriptionLabel = "INJECT_PAYLOAD_TO_FETCH_ALL_ROWS_FROM_USER_TABLE")
	public ResponseBean simpleWhereClauseInjectionLow() {
		ResponseBean responseBean = new ResponseBean(200, "Please provide an Identifier for finding UserInfo");
		Iterator<Entry<String, String>> itr = this.parameterBean.getQueryParamKeyValueMap().entrySet().iterator();
		if (itr.hasNext()) {
			String id = itr.next().getValue();
			responseBean = new ResponseBean(200, MessageFormat.format("UserInfo for id : {0}  is not present", id));
			UserBean userBean = this.mongoDBVulnerableServiceImpl.getUserInfoById(id);
			if (userBean != null) {
				responseBean.setBody(userBean.toString());
			}
		}
		return responseBean;
	}

	/**
	 * Below way or we can use query way too. ie :- The ?0 placeholder.
	 * This lets you substitute the value from the method arguments into the JSON query string.
	 * 
	 * String parameter values are escaped during the binding process, which means
	 * that it is not possible to add MongoDB specific operators through the
	 * argument.
	 */
	@VulnerabilityLevel(value = LevelEnum.SECURE, descriptionLabel = "SECURE_SPRING_CRUD_REPO_TO_ELIMINATE_INJECTION")
	public ResponseBean simpleWhereClauseInjectionSecure() {
		ResponseBean responseBean = new ResponseBean(200, "Please provide an Identifier for finding UserInfo");
		Iterator<Entry<String, String>> itr = this.parameterBean.getQueryParamKeyValueMap().entrySet().iterator();
		if (itr.hasNext()) {
			String id = itr.next().getValue();
			responseBean = new ResponseBean(200, MessageFormat.format("UserInfo for id : {0}  is not present", id));
			UserBean userBean = this.mongoDBServiceImpl.getUserInfoById(id);
			if (userBean != null) {
				responseBean.setBody(userBean.toString());
			}
		}
		return responseBean;
	}
}
