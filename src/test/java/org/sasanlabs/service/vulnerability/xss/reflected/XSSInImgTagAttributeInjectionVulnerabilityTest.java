package org.sasanlabs.service.vulnerability.xss.reflected;

import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.springframework.http.ResponseEntity;

class XSSInImgTagAttributeInjectionVulnerabilityTest {

    @ParameterizedTest
    @CsvSource({"ZAP.png,ZAP.png", "path/to/ZAP.png,path/to/ZAP.png", "./local/path/to/ZAP.png,./local/path/to/ZAP.png"})
    void getVulnerablePayloadLevelSecure_validPaths(String input, String expected) {
        XSSInImgTagAttributeInjectionVulnerability subject = new XSSInImgTagAttributeInjectionVulnerability();
        Map<String, String> queryParams = new HashMap<>();

        queryParams.put("[not used anyway]", input);

        ResponseEntity<String> actual = subject.getVulnerablePayloadLevelSecure(queryParams);

        String expectedString = "<img src=\"" + expected + "\" width=\"400\" height=\"300\"/>";

        assertEquals(expectedString, actual.getBody());
    }

    @ParameterizedTest
    @CsvSource({"/absolute/path/from/root/ZAP.png", "../path/traversion/ZAP.png", "hidden/../../traversion/ZAP.png", "/combined/../inavlid/paths/ZAP.png"})
    void getVulnerablePayloadLevelSecure_invalidPaths(String input) {
        XSSInImgTagAttributeInjectionVulnerability subject = new XSSInImgTagAttributeInjectionVulnerability();
        Map<String, String> queryParams = new HashMap<>();

        queryParams.put("[not used anyway]", input);

        ResponseEntity<String> actual = subject.getVulnerablePayloadLevelSecure(queryParams);

        assertTrue(StringUtils.isEmpty(actual.getBody()));
    }

    @ParameterizedTest
    @CsvSource({"''onerror='alert(1);'", " onerror=alert`1`", "/etc/passw\\0x00/nullbyte/path/to/ZAP.png",
        "http://evil.org/maliciousImage.png"})
    void getVulnerablePayloadLevelSecure_exploitsFromLowerLevels(String input) {
        XSSInImgTagAttributeInjectionVulnerability subject = new XSSInImgTagAttributeInjectionVulnerability();
        Map<String, String> queryParams = new HashMap<>();

        queryParams.put("[not used anyway]", input);

        ResponseEntity<String> actual = subject.getVulnerablePayloadLevelSecure(queryParams);

        assertTrue(StringUtils.isEmpty(actual.getBody()));
    }

}
