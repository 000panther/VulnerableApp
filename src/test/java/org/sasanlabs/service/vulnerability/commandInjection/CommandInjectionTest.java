package org.sasanlabs.service.vulnerability.commandInjection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;
import static org.sasanlabs.vulnerability.utils.Constants.LOCALHOST;

import java.io.IOException;
import java.net.URI;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.util.Strings;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;

/*
 * @author Feng-Yuan Yang coolesaltw@hotmail.com
 */
public class CommandInjectionTest {

    private CommandInjection commandInjection;
    private static final String ipAddress = "10.29.28.27";
    private static final String mockedSuccessPingResponse = "PING SUCCESS";

    @BeforeEach
    void setUp() throws IOException {
        commandInjection = Mockito.spy(new CommandInjection());

        StringBuilder stringBuilder = new StringBuilder().append(mockedSuccessPingResponse);

        // Real localhost ping is not able to operate in CI, Mock instead
        doReturn(stringBuilder)
                .when(commandInjection)
                .getResponseFromPingCommand(eq(LOCALHOST), eq(true));

        doReturn(stringBuilder)
                .when(commandInjection)
                .getResponseFromPingCommand(eq(ipAddress), eq(true));
    }

    @Test
    public void getVulnerablePayloadLevel1_Localhost_ExpectPingSuccess() throws IOException {
        // Act
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel1(LOCALHOST);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel1(LOCALHOST);
    }

    @Test
    public void getVulnerablePayloadLevel1_NoIp_ExpectNoResponseContent() throws IOException {
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel1(Strings.EMPTY);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel1(eq(Strings.EMPTY));
    }

    @Test
    public void getVulnerablePayloadLevel2_Localhost_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(LOCALHOST));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_NoIp_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(Strings.EMPTY));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(Strings.EMPTY, entity);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(Strings.EMPTY), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostAndSEMICOLON_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost;"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostPlusAnd_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost&"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostAnd20_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost%20%7c%20cat%20/etc/passwd"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostAnd26_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost%26"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostAnd3B_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost%3B"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel2_LocalhostAnd3b_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_2?ipaddress=localhost%3b"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel2(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_NoIp_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(Strings.EMPTY));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(Strings.EMPTY, entity);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(Strings.EMPTY), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostAndSEMICOLON_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost;"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostPlusAnd_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost&"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostAnd20_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost%20%7c%20cat%20/etc/passwd"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostAnd26_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost%26"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostAnd3B_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost%3B"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel3_LocalhostAnd3b_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_3?ipaddress=localhost%3b"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel3(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel3(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_NoIp_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(Strings.EMPTY));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(Strings.EMPTY, entity);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(Strings.EMPTY), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostAndSEMICOLON_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost;"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostPlusAnd_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost&"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostAnd20_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost%20%7c%20cat%20/etc/passwd"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostAnd26_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost%26"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostAnd3B_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost%3B"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel4_LocalhostAnd3b_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_4?ipaddress=localhost%3b"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_NoIp_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(Strings.EMPTY));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(Strings.EMPTY, entity);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(Strings.EMPTY), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostAndSEMICOLON_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost;"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostPlusAnd_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost&"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostAnd7c_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost%20%7c%20cat%20/etc/passwd"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostAnd26_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost%26"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostAnd3B_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost%3B"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel5(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel5(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel5_LocalhostAnd3b_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity =
                new RequestEntity(
                        HttpMethod.GET,
                        URI.create(
                                "http://localhost:9090/CommandInjection/LEVEL_5?ipaddress=localhost%3b"));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel4(LOCALHOST, entity);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel4(eq(LOCALHOST), eq(entity));
    }

    @Test
    public void getVulnerablePayloadLevel6_Localhost_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        // Act
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel6(LOCALHOST);

        // Assert
        assertStatusAndValidate(responseEntity, LOCALHOST, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel6(LOCALHOST);
    }

    @Test
    public void getVulnerablePayloadLevel6_NoIp_ExpectNoResponseContent()
            throws ServiceApplicationException, IOException {
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel6(Strings.EMPTY);

        // Assert
        assertStatusAndValidate(responseEntity, Strings.EMPTY, Strings.EMPTY);

        verify(commandInjection).getVulnerablePayloadLevel6(eq(Strings.EMPTY));
    }

    @Test
    public void getVulnerablePayloadLevel6_ValidIp_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel6(ipAddress);

        // Assert
        assertStatusAndValidate(responseEntity, ipAddress, mockedSuccessPingResponse);

        verify(commandInjection).getVulnerablePayloadLevel6(ipAddress);
    }

    private void assertStatusAndValidate(
            ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity,
            String ipAddress,
            String content)
            throws IOException {
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(responseEntity.getBody().getIsValid()).isEqualTo(true);
        assertThat(responseEntity.getBody().getContent()).isEqualTo(content);

        verify(commandInjection)
                .getResponseFromPingCommand(eq(ipAddress), eq(StringUtils.isNotBlank(content)));
    }
}
