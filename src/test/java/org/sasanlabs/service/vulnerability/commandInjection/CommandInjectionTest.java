package org.sasanlabs.service.vulnerability.commandInjection;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;

import java.io.IOException;
import java.net.URI;
import java.util.function.Supplier;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.util.Strings;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.sasanlabs.service.exception.ServiceApplicationException;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.util.Assert;

/*
 * @author Feng-Yuan Yang coolesaltw@hotmail.com
 */
public class CommandInjectionTest {

    private CommandInjection commandInjection;

    private String localhost = "localhost";
    Supplier<Boolean> trueCondition = () -> true;
    Supplier<Boolean> falseCondition = () -> false;
    String successReturnStr = "PING SUCCESS";

    @BeforeEach
    void setUp() throws IOException {
        commandInjection = Mockito.spy(new CommandInjection());

        StringBuilder stringBuilder = new StringBuilder().append(successReturnStr);

        // Real localhost ping is not able to operate in CI, Mock instead
        doReturn(stringBuilder)
                .when(commandInjection)
                .getResponseFromPingCommand(eq(localhost), any(Supplier.class));

        doReturn(trueCondition).when(commandInjection).getSupplier(true);

        doReturn(falseCondition).when(commandInjection).getSupplier(false);
    }

    @Test
    public void getVulnerablePayloadLevel1_Localhost_ExpectPingSuccess() throws IOException {
        // Act
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel1(localhost);

        // Assert
        Assert.isTrue(
                successReturnStr.equals(responseEntity.getBody().getContent()),
                "must get response");
        Assert.isTrue(HttpStatus.OK == responseEntity.getStatusCode(), "must equal");
        Assert.isTrue(responseEntity.getBody().getIsValid(), "must equal");

        verify(commandInjection).getVulnerablePayloadLevel1(localhost);
        verify(commandInjection).getResponseFromPingCommand(eq(localhost), eq(trueCondition));
    }

    @Test
    public void getVulnerablePayloadLevel1_NoIp_ExpectNoResponseContent() throws IOException {
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel1(Strings.EMPTY);

        // Assert
        Assert.isTrue(StringUtils.isBlank(responseEntity.getBody().getContent()), "must be empty");
        Assert.isTrue(HttpStatus.OK == responseEntity.getStatusCode(), "must equal");
        Assert.isTrue(responseEntity.getBody().getIsValid(), "must equal");

        verify(commandInjection).getVulnerablePayloadLevel1(eq(Strings.EMPTY));
        verify(commandInjection).getResponseFromPingCommand(eq(Strings.EMPTY), eq(falseCondition));
    }

    @Test
    public void getVulnerablePayloadLevel2_Localhost_ExpectPingSuccess()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(localhost));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(localhost, entity);

        Assert.isTrue(
                successReturnStr.equals(responseEntity.getBody().getContent()),
                "must get response");
        Assert.isTrue(HttpStatus.OK == responseEntity.getStatusCode(), "must equal");
        Assert.isTrue(responseEntity.getBody().getIsValid(), "must equal");

        verify(commandInjection).getVulnerablePayloadLevel2(eq(localhost), eq(entity));
        verify(commandInjection).getResponseFromPingCommand(eq(localhost), eq(trueCondition));
    }

    @Test
    public void getVulnerablePayloadLevel2_WrongHost_Return_NotResolve()
            throws ServiceApplicationException, IOException {
        RequestEntity entity = new RequestEntity(HttpMethod.GET, URI.create(Strings.EMPTY));
        ResponseEntity<GenericVulnerabilityResponseBean<String>> responseEntity =
                commandInjection.getVulnerablePayloadLevel2(Strings.EMPTY, entity);

        // Assert
        Assert.isTrue(StringUtils.isBlank(responseEntity.getBody().getContent()), "must be empty");
        Assert.isTrue(HttpStatus.OK == responseEntity.getStatusCode(), "must equal");
        Assert.isTrue(responseEntity.getBody().getIsValid(), "must equal");

        verify(commandInjection).getVulnerablePayloadLevel2(eq(Strings.EMPTY), eq(entity));
        verify(commandInjection).getResponseFromPingCommand(eq(Strings.EMPTY), eq(falseCondition));
    }
}
